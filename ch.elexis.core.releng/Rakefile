# (c) copyright 2014 by Niklaus Giger <niklaus.giger@member.fsf.org>
# A small script to generate a debian package for Elexis
# based on https://github.com/jordansissel/fpm/wiki
# small, fine tutorial for simple debian packages from
# http://www.leaseweblabs.com/2013/06/creating-custom-debian-packages/
# TODO:
# translations: http://anonscm.debian.org/cgit/pkg-kde/kde-sc/kde-workspace.git/tree/debian/po/de.po?id=debian/4.11.13-1
require 'rake/clean'

CLEAN.include('*.deb')
CLEAN.include('*.pkg')

def getVersion
  qualifier = nil
  baseVer   = nil
  repo_props = "../ch.elexis.core.p2site/repo.properties"
  if File.exists?(repo_props)
    IO.readlines(repo_props).each {
      |line|
      m = /qualifier=(.*)/.match(line)
      qualifier = m[1] if m
      m2 = /projectVersion=(.*)/.match(line)
      baseVer = m2[1] if m2
    }
  end
  if qualifier and baseVer
    return "#{baseVer.sub('-SNAPSHOT', qualifier)}"
  elsif baseVer
    return baseVer
  else
    return "3.0.0_#{Time.now.strftime('%Y%m%d-%H%M')}"
  end
end

MACOSX_REGEXP  = /macos|darwin/i
COMMON_OPTIONS = %(--version #{getVersion} \
      --license EPL \
      --category medicine \
      --name elexis \
      --maintainer niklaus.giger@member.fsf.org \
      --description "An Eclipse RCP program for all aspects of a (Swiss) medical practice" --url http://elexis.info )

desc "Create debian package for amd64 and Linux"
linuxPath = "../*/target/products/*/linux/gtk/x86_64"
task "deb" => [:clean] do
  if Dir.glob(linuxPath).size != 1
    puts "Cannot make a debian package as we found no files via #{linuxPath}"
  else
    binaries = Dir.glob('../*/target/products')[0]
    exit 1 unless Dir.exists?(binaries)
    workdir = "/tmp/#{File.basename(__FILE__, '.rb')}"
    FileUtils.rm_rf(workdir)
    cmd = %(bundle exec fpm \
        #{COMMON_OPTIONS} \
        --workdir #{workdir} \
        --depends java7-runtime \
        --depends 'postgresql-client|mysql-client' \
        --deb-user elexis \
        --deb-group elexis \
        --vendor niklaus.giger@member.fsf.org \
        --deb-config debian/config \
        --deb-changelog debian/changelog \
        --deb-templates debian/templates \
        --after-install debian/after_install \
        -t deb \
        -s dir #{Dir.glob(linuxPath)[0]}=/usr/lib/elexis
    )
    puts cmd
    system(cmd)
    debs = Dir.glob('*.deb')
    exit 2 unless debs.size == 1
    name = debs[0].match(/(\w+[0-9.]+[a-z]*)/)
    exit 3 unless name
    latest = "#{name[1]}_latest.deb"
    exit 4 unless system("ln -s #{debs[0]} #{latest}")
    puts "Created *.deb #{ Dir.glob('*.deb')}"
    FileUtils.mv(latest, binaries, :verbose => true)
    FileUtils.mv(debs[0], binaries, :verbose => true)
  end
end if RUBY_PLATFORM.match(/x86_64-linux/)
